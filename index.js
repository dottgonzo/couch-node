"use strict";
var Promise = require("bluebird");
var rpj = require("request-promise-json");
function find(_id, couchdb) {
    return new Promise(function (resolve, reject) {
        rpj.get(couchdb + "/" + _id).then(function (obj) {
            resolve(obj);
        }).catch(function (err) {
            reject(err);
        });
    });
}
function update(obj, couchdb) {
    return new Promise(function (resolve, reject) {
        find(obj._id, couchdb).then(function (o) {
            obj._rev = o._rev;
            create(obj, couchdb).then(function () {
                resolve(true);
            }).catch(function (err) {
                reject(err);
            });
        });
    });
}
function create(obj, couchdb) {
    return new Promise(function (resolve, reject) {
        rpj.put(couchdb + "/" + obj._id, event).then(function () {
            resolve(true);
        }).catch(function (err) {
            reject(err);
        });
    });
}
var CouchManager = (function () {
    function CouchManager(couch) {
        this.couchdb = couch;
    }
    CouchManager.prototype.createDB = function () {
        var db = this.couchdb;
        rpj.get(db).catch(function (err) {
            if (err.statusCode === 404) {
                rpj.put(db).then(function () {
                    console.log("new DB " + db.split("/")[db.split("/").length - 1]);
                }).catch(function (err) {
                    throw Error(err);
                });
            }
            else {
                throw Error(err);
            }
        });
    };
    CouchManager.prototype.create = function (obj) {
        return create(obj, this.couchdb);
    };
    CouchManager.prototype.update = function (obj) {
        return update(obj, this.couchdb);
    };
    CouchManager.prototype.find = function (_id) {
        return find(_id, this.couchdb);
    };
    return CouchManager;
}());
module.exports = CouchManager;

//# sourceMappingURL=data:application/json;base64,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O1lBQ3BCLENBQUM7UUFFTCxDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUM7SUFDRCw2QkFBTSxHQUFOLFVBQU8sR0FBRztRQUNOLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsNkJBQU0sR0FBTixVQUFPLEdBQUc7UUFDTixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELDJCQUFJLEdBQUosVUFBSyxHQUFHO1FBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTCxtQkFBQztBQUFELENBekNBLEFBeUNDLElBQUE7QUFHRCxpQkFBUyxZQUFZLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuXG5sZXQgcnBqID0gcmVxdWlyZShcInJlcXVlc3QtcHJvbWlzZS1qc29uXCIpO1xuXG5mdW5jdGlvbiBmaW5kKF9pZDogc3RyaW5nLCBjb3VjaGRiOiBzdHJpbmcpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICBycGouZ2V0KGNvdWNoZGIgKyBcIi9cIiArIF9pZCkudGhlbihmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJlc29sdmUob2JqKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSlcblxuICAgIH0pXG5cbn1cblxuXG5mdW5jdGlvbiB1cGRhdGUob2JqLCBjb3VjaGRiOiBzdHJpbmcpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICBmaW5kKG9iai5faWQsIGNvdWNoZGIpLnRoZW4oZnVuY3Rpb24obzogYW55KSB7XG5cbiAgICAgICAgICAgIG9iai5fcmV2ID0gby5fcmV2O1xuXG4gICAgICAgICAgICBjcmVhdGUob2JqLCBjb3VjaGRiKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcblxuICAgIH0pXG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlKG9iaiwgY291Y2hkYjogc3RyaW5nKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgcnBqLnB1dChjb3VjaGRiICsgXCIvXCIgKyBvYmouX2lkLCBldmVudCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pXG5cbiAgICB9KVxuXG59XG5cblxuY2xhc3MgQ291Y2hNYW5hZ2VyIHtcblxuICAgIGNvdWNoZGI6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGNvdWNoOiBzdHJpbmcpIHtcblxuICAgICAgICB0aGlzLmNvdWNoZGIgPSBjb3VjaDtcblxuXG4gICAgfVxuXG5cblxuICAgIGNyZWF0ZURCKCkge1xuICAgICAgICBsZXQgZGIgPSB0aGlzLmNvdWNoZGI7XG4gICAgICAgIHJwai5nZXQoZGIpLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICBycGoucHV0KGRiKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5ldyBEQiBcIiArIGRiLnNwbGl0KFwiL1wiKVtkYi5zcGxpdChcIi9cIikubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZXJyKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pXG5cbiAgICB9XG4gICAgY3JlYXRlKG9iaikge1xuICAgICAgICByZXR1cm4gY3JlYXRlKG9iaiwgdGhpcy5jb3VjaGRiKTtcbiAgICB9XG5cbiAgICB1cGRhdGUob2JqKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGUob2JqLCB0aGlzLmNvdWNoZGIpO1xuICAgIH1cblxuICAgIGZpbmQoX2lkKSB7XG4gICAgICAgIHJldHVybiBmaW5kKF9pZCwgdGhpcy5jb3VjaGRiKTtcbiAgICB9XG5cbn1cblxuXG5leHBvcnQgPSBDb3VjaE1hbmFnZXIiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
