"use strict";
var Promise = require("bluebird");
var superagent = require("superagent");
var couchNode = (function () {
    function couchNode(couch, auth) {
        this.couchdb = couch;
        if (auth)
            this.auth = auth;
    }
    couchNode.prototype.createDB = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.get(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
            else {
                superagent.get(_this.couchdb).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
        });
    };
    couchNode.prototype.create = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.put(_this.couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
            else {
                superagent.put(_this.couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
        });
    };
    couchNode.prototype.update = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.find(obj._id).then(function (o) {
                obj._rev = o._rev;
                _this.create(obj).then(function () {
                    resolve(true);
                }).catch(function (err) {
                    reject(err);
                });
            });
        });
    };
    couchNode.prototype.find = function (_id, _rev) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.get(_this.couchdb + "/" + _id).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
            else {
                superagent.get(_this.couchdb + "/" + _id).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
        });
    };
    couchNode.prototype.delete = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.find(id).then(function (a) {
                a.delete = true;
                _this.update(a).then(function () {
                    resolve(true);
                }).catch(function (err) {
                    reject(err);
                });
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    couchNode.prototype.finder = function (params, notIncludeDocs) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (params[0] !== '?') {
                reject('params must starts with?');
            }
            else {
                if (params.split('include_docs').length < 2) {
                    if (!notIncludeDocs)
                        params = params + '&include_docs=true';
                }
                if (_this.auth) {
                    superagent.get(_this.couchdb + "/_all_docs" + params).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(res.body);
                        }
                    });
                }
                else {
                    superagent.get(_this.couchdb + "/_all_docs" + params).end(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(res.body);
                        }
                    });
                }
            }
        });
    };
    couchNode.prototype.betweenKeys = function (start, stop, notIncludeDocs) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var params = '?startKey=' + start + '&endKey=' + stop;
            _this.finder(params, notIncludeDocs).then(function (a) {
                resolve(a);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    return couchNode;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = couchNode;

//# sourceMappingURL=data:application/json;base64,
