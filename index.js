"use strict";
var Promise = require("bluebird");
var superagent = require("superagent");
function find(_id, couchdb, auth) {
    return new Promise(function (resolve, reject) {
        if (auth) {
            superagent.get(couchdb + "/" + _id).auth(auth.user, auth.password).end(function (err, res) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res.body);
                }
            });
        }
        else {
            superagent.get(couchdb + "/" + _id).end(function (err, res) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res.body);
                }
            });
        }
    });
}
function update(obj, couchdb, auth) {
    return new Promise(function (resolve, reject) {
        find(obj._id, couchdb, auth).then(function (o) {
            obj._rev = o._rev;
            create(obj, couchdb, auth).then(function () {
                resolve(true);
            }).catch(function (err) {
                reject(err);
            });
        });
    });
}
function create(obj, couchdb, auth) {
    return new Promise(function (resolve, reject) {
        if (auth) {
            superagent.put(couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).auth(auth.user, auth.password).end(function (err, res) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res.body);
                }
            });
        }
        else {
            superagent.put(couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).end(function (err, res) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(res.body);
                }
            });
        }
    });
}
var default_1 = (function () {
    function default_1(couch, auth) {
        this.couchdb = couch;
        if (auth)
            this.auth = auth;
    }
    default_1.prototype.createDB = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.get(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
            else {
                superagent.get(_this.couchdb).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
        });
    };
    default_1.prototype.create = function (obj) {
        return create(obj, this.couchdb);
    };
    default_1.prototype.update = function (obj) {
        return update(obj, this.couchdb);
    };
    default_1.prototype.find = function (_id) {
        return find(_id, this.couchdb);
    };
    return default_1;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=data:application/json;base64,
