"use strict";
var Promise = require("bluebird");
var superagent = require("superagent");
var async = require("async");
var couchNode = (function () {
    function couchNode(couch, auth) {
        this.couchdb = couch;
        if (auth)
            this.auth = auth;
    }
    couchNode.prototype.createDB = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.get(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
            else {
                superagent.get(_this.couchdb).end(function (err, res) {
                    if (err) {
                        if (err.status === 404) {
                            superagent.put(_this.couchdb).end(function (err, res) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(res.body);
                                }
                            });
                        }
                        else {
                            reject(err);
                        }
                    }
                    else {
                        resolve(res.body);
                    }
                });
            }
        });
    };
    couchNode.prototype.create = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.put(_this.couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        obj._rev = JSON.parse(res.text).rev;
                        resolve(obj);
                    }
                });
            }
            else {
                superagent.put(_this.couchdb + "/" + obj._id).set('Content-Type', 'application/json').send(JSON.stringify(obj)).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        obj._rev = JSON.parse(res.text).rev;
                        resolve(obj);
                    }
                });
            }
        });
    };
    couchNode.prototype.create_more = function (obj) {
        var results = [];
        var _this = this;
        return new Promise(function (resolve, reject) {
            async.eachSeries(obj, function (r, cb) {
                _this.create(r).then(function (result) {
                    results.push(result);
                    cb();
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(results);
                }
            });
        });
    };
    couchNode.prototype.update_more = function (obj) {
        var results = [];
        var _this = this;
        return new Promise(function (resolve, reject) {
            async.eachSeries(obj, function (r, cb) {
                _this.update(r).then(function (result) {
                    results.push(result);
                    cb();
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(results);
                }
            });
        });
    };
    couchNode.prototype.delete_more = function (ids) {
        var results = [];
        var _this = this;
        return new Promise(function (resolve, reject) {
            async.eachSeries(ids, function (r, cb) {
                _this.delete(r).then(function (result) {
                    results.push(result);
                    cb();
                }).catch(function (err) {
                    cb(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(results);
                }
            });
        });
    };
    couchNode.prototype.update = function (obj) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.find(obj._id).then(function (o) {
                obj._rev = o._rev;
                _this.create(obj).then(function (c) {
                    resolve(obj);
                }).catch(function (err) {
                    reject(err);
                });
            });
        });
    };
    couchNode.prototype.find = function (_id, _rev) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.auth) {
                superagent.get(_this.couchdb + "/" + _id).set('Content-Type', 'application/json').auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(JSON.parse(res.text));
                    }
                });
            }
            else {
                superagent.get(_this.couchdb + "/" + _id).set('Content-Type', 'application/json').end(function (err, res) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(JSON.parse(res.text));
                    }
                });
            }
        });
    };
    couchNode.prototype.delete = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.find(id).then(function (a) {
                a._deleted = true;
                _this.update(a).then(function () {
                    resolve(true);
                }).catch(function (err) {
                    reject(err);
                });
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    couchNode.prototype.finder = function (params, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (params[0] !== '?') {
                reject('params must starts with?');
            }
            else {
                if (params.split('include_docs').length < 2) {
                    if (!options || !options.notIncludeDocs)
                        params = params + '&include_docs=true';
                }
                if (_this.auth) {
                    superagent.get(_this.couchdb + "/_all_docs" + params).auth(_this.auth.user, _this.auth.password).end(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            var ob = JSON.parse(res.text).rows;
                            var objects = [];
                            for (var i = 0; i < ob.length; i++) {
                                objects.push(ob[i].doc);
                            }
                            resolve(objects);
                        }
                    });
                }
                else {
                    superagent.get(_this.couchdb + "/_all_docs" + params).end(function (err, res) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            var ob = JSON.parse(res.text).rows;
                            var objects = [];
                            for (var i = 0; i < ob.length; i++) {
                                objects.push(ob[i].doc);
                            }
                            resolve(objects);
                        }
                    });
                }
            }
        });
    };
    couchNode.prototype.betweenKeys = function (start, stop, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var params = '?startKey=' + start + '&endKey=' + stop;
            _this.finder(params, options).then(function (a) {
                resolve(a);
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    return couchNode;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = couchNode;

//# sourceMappingURL=data:application/json;base64,
